{
  "version": 3,
  "sources": ["../src/lib/index.js", "../src/lib/parser.js", "../src/lib/converter.js", "../package.json", "../src/lib/version.js"],
  "sourcesContent": ["import Promise from 'promise';\nimport { Playlist, Song, Cell, Chord } from './parser.js';\nimport { Converter, LogLevel } from './converter.js';\nimport { Version } from './version.js';\n\nexport function convertSync(ireal, options = {}) {\n  const playlist = new Playlist(ireal);\n  playlist.songs.forEach(song => {\n    song.musicXml = Converter.convert(song, options);\n  });\n  return playlist;\n}\n\nexport async function convert(ireal, options = {}) {\n  return new Promise(resolve => resolve(convertSync(ireal, options)));\n}\n\nexport { Playlist, Song, Cell, Chord, Converter, LogLevel, Version };\n", "/**\n * The iReal Pro parser is derived from\n * https://github.com/daumling/ireal-renderer\n * which is itself derived from\n * https://github.com/pianosnake/ireal-reader\n *\n * None of those modules did exactly what is needed here, namely return\n * a full structure that can be iterated downstream.\n */\n\nimport diff from 'fast-diff';\n\nexport class Playlist {\n  /**\n   * @param {string} ireal\n   */\n  constructor(ireal) {\n    const playlistEncoded = /.*?(irealb(?:ook)?):\\/\\/([^\"]*)/.exec(ireal);\n    const playlist = decodeURIComponent(playlistEncoded[2]);\n    const parts = playlist.split(\"===\");  //songs are separated by ===\n    if (parts.length > 1) this.name = parts.pop();  //playlist name\n    this.songs = parts\n      .map(part => {\n        try {\n          return new Song(part, playlistEncoded[1] === 'irealbook');\n        }\n        catch (error) {\n          const parts = part.split(\"=\");\n          const title = Song.parseTitle(parts[0].trim());\n          console.error(`[ireal-musicxml] [${title}] ${error}`);\n          return null;\n        }\n      })\n      .filter(song => song !== null)\n      .reduce((songs, song) => {\n        if (songs.length > 0) {\n          // Detect multi-part songs via their titles.\n          // The parts of the same song have the same title, except for the part number, so they follow each other in the list.\n          // The `diff` module compares two titles and returns a list of similarities and differences.\n          // We expect the first diff to be a similarity, followed by differences that are only numeric.\n          // When we find a multi-part song, we just concatenate the cells into the first part.\n          const diffs = diff(songs[songs.length-1].title, song.title);\n          if (diffs[0][0] === 0 && diffs.every(d => d[0] === 0 || d[1].match(/^\\d+$/))) {\n            songs[songs.length-1].cells = songs[songs.length-1].cells.concat(song.cells);\n            return songs;\n          }\n        }\n        songs.push(song);\n        return songs;\n      }, []);\n  }\n}\n\nexport class Cell {\n  constructor() {\n    /** @type {string[]} */\n    this.annots = [];\n    /** @type {string[]} */\n    this.comments = [];\n    /** @type {'|' | '[' | ']' | '{' | '}' | 'Z'} */\n    this.bars = \"\";\n    /** @type {number} */\n    this.spacer = 0;\n    /** @type {Chord|null} */\n    this.chord = null;\n  }\n}\n\nexport class Chord {\n  /**\n   * @param {string} note\n   * @param {string} modifiers\n   * @param {Chord} over\n   * @param {Chord} alternate\n   */\n  constructor(note, modifiers = \"\", over = null, alternate = null) {\n    this.note = note;\n    this.modifiers = modifiers;\n    this.over = over;\n    this.alternate = alternate;\n  }\n}\n\nexport class Song {\n  /**\n   * @param {string} ireal\n   * @param {boolean} oldFormat\n   */\n  constructor(ireal, oldFormat = false) {\n    this.cells = [];\n    this.musicXml = \"\";\n    if (!ireal) {\n      this.title = \"\";\n      this.composer = \"\";\n      this.style = \"\";\n      this.key = \"\";\n      this.transpose = 0;\n      this.groove = \"\";\n      this.bpm = 0;\n      this.repeats = 0;\n      return;\n    }\n    const parts = ireal.split(\"=\"); //split on one sign, remove the blanks\n    if (oldFormat) {\n      this.title = Song.parseTitle(parts[0].trim());\n      this.composer = Song.parseComposer(parts[1].trim());\n      this.style = parts[2].trim();\n      this.key = parts[3];\n      this.cells = this.parse(parts[5]);\n    }\n    else {\n      this.title = Song.parseTitle(parts[0].trim());\n      this.composer = Song.parseComposer(parts[1].trim());\n      this.style = parts[3].trim();\n      this.key = parts[4];\n      this.transpose = +parts[5] || 0; // TODO\n      this.groove = parts[7];\n      this.bpm = +parts[8];\n      this.repeats = +parts[9] || 3;\n      const music = parts[6].split(\"1r34LbKcu7\");\n      this.cells = this.parse(unscramble(music[1]));\n    }\n  }\n\n  /**\n   * The RegExp for a complete chord. The match array contains:\n   * 1 - the base note\n   * 2 - the modifiers (+-ohd0123456789 and su for sus)\n   * 3 - any comments (may be e.g. add, sub, or private stuff)\n   * 4 - the \"over\" part starting with a slash\n   * 5 - the top chord as (chord)\n   * @type RegExp\n   */\n  static chordRegex = /^([A-G][b#]?)((?:sus|alt|add|[+\\-^\\dhob#])*)(\\*.+?\\*)*(\\/[A-G][#b]?)?(\\(.*?\\))?/;\n  static chordRegex2 = /^([ Wp])()()(\\/[A-G][#b]?)?(\\(.*?\\))?/;\t// need the empty captures to match chordRegex\n\n  static regExps = [\n    /^\\*[a-zA-Z]/,\t\t\t\t\t\t\t// section\n    /^T\\d\\d/,\t\t\t\t\t\t\t\t// time measurement\n    /^N./,\t\t\t\t\t\t\t\t\t// repeat marker\n    /^<.*?>/,\t\t\t\t\t\t\t\t// comments\n    Song.chordRegex,\t\t\t\t// chords\n    Song.chordRegex2,\t\t\t\t// space, W and p (with optional alt chord)\n  ];\n\n  /**\n   * The parser cracks up the raw music string into several objects,\n   * one for each cell. iReal Pro works with rows of 16 cell each. The result\n   * is stored at song.cells.\n   *\n   * Each object has the following properties:\n   *\n   * chord: if non-null, a chord object with these properties:\n   *   note      - the base note (also blank, W = invisible root, p/x/r - pause/bar repeat/double-bar repeat, n - no chord)\n   *   modifiers - the modifiers, like 7, + o etc (string)\n   *   over      - if non-null, another chord object for the under-note\n   *   alternate - if non-null another chord object for the alternate chord\n   * annots: annotations, a string of:\n   *  *x  - section, like *v, *I, *A, *B etc\n   *  Nx  - repeat bots (N1, N2 etc)\n   *  Q   - coda\n   *  S   - segno\n   *  Txx - measure (T44 = 4/4 etc, but T12 = 12/8)\n   *  U   - END\n   *  f   - fermata\n   *  l   - (letter l) normal notes\n   *  s   - small notes\n   * comments: an array of comment strings\n   * bars: bar specifiers, a string of:\n   *  | - single vertical bar, left\n   *  [ - double bar, left\n   *  ] - double bar, right\n   *  { - repeat bar, left\n   *  } - repeat bar, right\n   *  Z - end bar, right\n   * spacer - a number indicating the number of vertical spacers above this cell\n   *\n   * @param {string} ireal\n   * @returns {Cell[]}\n   */\n  parse(ireal) {\n    let text = ireal.trim();\n    const arr = [];\n    while (text) {\n      let found = false;\n      for (let i = 0; i < Song.regExps.length; i++) {\n        const match = Song.regExps[i].exec(text);\n        if (match) {\n          found = true;\n          if (match.length <= 2) {\n            arr.push(match[0]);\n            text = text.substring(match[0].length);\n          }\n          else {\n            // a chord\n            arr.push(match);\n            text = text.substring(match[0].length);\n          }\n          break;\n        }\n      }\n      if (!found) {\n        // ignore the comma separator\n        if (text[0] !== ',')\n          arr.push(text[0]);\n        text = text.substring(1);\n      }\n    }\n\n    // pass 2: extract prefixes, suffixes, annotations and comments\n    const cells = [];\n    let obj = this.newCell(cells);\n    let prevobj = null;\n    for (let i = 0; i < arr.length; i++) {\n      let cell = arr[i];\n      if (Array.isArray(cell)) {\n        obj.chord = this.parseChord(cell);\n        cell = \" \";\n      }\n      switch (cell[0]) {\n        case '{':\t// open repeat\n        case '[':\t// open double bar\n          if (prevobj) { prevobj.bars += ')'; prevobj = null; }\n          obj.bars = cell; cell = null; break;\n        case '|':\t// single bar - close previous and open this\n          if (prevobj) { prevobj.bars += ')'; prevobj = null; }\n          obj.bars = '('; cell = null; break;\n        case ']':\t// close double bar\n        case '}':\t// close repeat\n        case 'Z':\t// ending double bar\n          if (prevobj) { prevobj.bars += cell; prevobj = null; }\n          cell = null; break;\n        case 'n':\t// N.C.\n          obj.chord = new Chord(cell[0]);\n          break;\n        case ',':\tcell = null; break; // separator\n        case 'S':\t// segno\n        case 'T':\t// time measurement\n        case 'Q':\t// coda\n        case 'N':\t// repeat\n        case 'U':\t// END\n        case 's':\t// small\n        case 'l':\t// normal\n        case 'f':\t// fermata\n        case '*': obj.annots.push(cell); cell = null; break;\n        case 'Y': obj.spacer++; cell = null; prevobj = null; break;\n        case 'r':\n        case 'x':\n        case 'W':\n          obj.chord = new Chord(cell);\n          break;\n        case '<':\n          cell = cell.substring(1, cell.length-1);\n          obj.comments.push(cell);\n          cell = null; break;\n        default:\n      }\n      if (cell && i < arr.length-1) {\n        prevobj = obj;\t\t// so we can add any closing barline later\n        obj = this.newCell(cells);\n      }\n    }\n    return cells;\n  }\n\n  /**\n   * The title had \"A\" and \"The\" at the back (e.g. \"Gentle Rain, The\")\n   * @param {string} title\n   * @returns {string}\n   */\n  static parseTitle(title) {\n    return title.replace(/(.*)(, )(A|The)$/g, '$3 $1');\n  }\n\n  /**\n   * The composer is reversed (last first) if it only has 2 names :shrug:\n   * @param {string} composer\n   * @returns {string}\n   */\n  static parseComposer(composer) {\n    const parts = composer.split(/(\\s+)/); // match and return spaces too\n    if (parts.length === 3) { // [last, spaces, first]\n      return parts[2] + parts[1] + parts[0];\n    }\n    return composer;\n  }\n\n  /**\n   * @param {string[]} chord\n   * @returns {Chord}\n   */\n  parseChord(chord) {\n    const note = chord[1] || \" \";\n    let modifiers = chord[2] || \"\";\n    const comment = chord[3] || \"\";\n    if (comment)\n      modifiers += comment.substring(1, comment.length-1);\n    let over = chord[4] || \"\";\n    if (over[0] === '/')\n      over = over.substring(1);\n    let alternate = chord[5] || null;\n    if (alternate) {\n      chord = Song.chordRegex.exec(alternate.substring(1, alternate.length-1));\n      alternate = chord ? this.parseChord(chord) : null;\n    }\n    // empty cell?\n    if (note === \" \" && !alternate && !over)\n      return null;\n    if (over) {\n      const offset = (over[1] === '#' || over[1] === 'b') ? 2 : 1;\n      over = new Chord(over.substring(0, offset), over.substring(offset), null, null);\n    }\n    else\n      over = null;\n    return new Chord(note, modifiers, over, alternate);\n  }\n\n  /**\n   * @param {Cell[]} cells\n   * @returns {Cell}\n   */\n  newCell(cells) {\n    const obj = new Cell;\n    cells.push(obj);\n    return obj;\n  }\n}\n\n\n/**\n * Unscrambling hints from https://github.com/ironss/accompaniser/blob/master/irealb_parser.lua\n * Strings are broken up in 50 character segments. each segment undergoes character substitution addressed by obfusc50()\n * Note that a final part of length 50 or 51 is not scrambled.\n * Finally need to substitute for Kcl, LZ and XyQ.\n * @param {string} s\n * @returns {string}\n */\nfunction unscramble(s) {\n  let r = '', p;\n\n  while (s.length > 51){\n    p = s.substring(0, 50);\n    s = s.substring(50);\n    r = r + obfusc50(p);\n  }\n  r = r + s;\n  // now undo substitution obfuscation\n  r =  r.replace(/Kcl/g, '| x').replace(/LZ/g, ' |').replace(/XyQ/g, '   ');\n  return r;\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nfunction obfusc50(s) {\n  // the first 5 characters are switched with the last 5\n  const newString = s.split('');\n  for (let i = 0; i < 5; i++){\n    newString[49 - i] = s[i];\n    newString[i] = s[49 - i];\n  }\n  // characters 10-24 are also switched\n  for (let i = 10; i < 24; i++){\n    newString[49 - i] = s[i];\n    newString[i] = s[49 - i];\n  }\n  return newString.join('');\n}\n", "import jstoxml from 'jstoxml';\nimport ChordSymbol from 'chord-symbol';\nconst { chordParserFactory, chordRendererFactory } = ChordSymbol;\nimport { Version } from './version.js';\n\nexport class LogLevel {\n  static Debug = 0;\n  static Info = 1;\n  static Warn = 2;\n  static Error = 3;\n  static None = 4;\n}\n\nconst MUSICXML_VERSION = '4.0';\nconst SCALING_MM = 7;\nconst SCALING_TENTHS = 40;\n\nexport class Converter {\n  static defaultOptions = {\n    'divisions': 768, // same as used by iReal\n    'notation': 'rhythmic', // 'rhythmic' for rhythmic notation, 'slash' for slash notation\n    'step': 'B', // chord note\n    'octave': 4, // chord note octave\n    'notehead': 'slash', // chord note head\n    'noteheadSize': 'large', // size of chord note head\n    'date': true, // include encoding date\n    'clef': false, // hide clef by default\n    'keySignature': false, // hide key signature by default\n    'pageWidth': 210, // mm (A4)\n    'pageHeight': 297, // mm (A4)\n    'pageMargin': 15, // mm\n    'logLevel': LogLevel.Warn\n  };\n\n  static sequenceAttributes = [\n    // Expected order of attribute elements.\n    // https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/attributes/\n    'divisions',\n    'key',\n    'time',\n    'staves',\n    'part-symbol',\n    'instruments',\n    'clef',\n    'staff-details',\n    'transpose',\n    'directive',\n    'measure-style'\n  ];\n\n  static sequenceNote = [\n    // Expected order of note elements.\n    // https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/note/\n    'cue',\n    'pitch',\n    'rest',\n    'unpitched',\n    'duration',\n    'tie',\n    'voice',\n    'type',\n    'dot',\n    'accidental',\n    'time-modification',\n    'stem',\n    'notehead',\n    'notehead-text',\n    'staff',\n    'beam',\n    'notations',\n    'lyric',\n    'play'\n  ];\n\n  static sequenceNotations = [\n    // Expected order of notations elements.\n    // https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/notations/\n    'accidental-mark',\n    'arpeggiate',\n    'articulations',\n    'dynamics',\n    'fermata',\n    'glissando',\n    'non-arpeggiate',\n    'ornaments',\n    'other-notation',\n    'slide',\n    'slur',\n    'technical',\n    'tied',\n    'tuplet'\n  ];\n\n  static sequenceBarline = [\n    // Expected order of barline elements.\n    // https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/barline/\n    'bar-style',\n    'footnote',\n    'level',\n    'wavy-line',\n    'segno',\n    'coda',\n    'fermata',\n    'ending',\n    'repeat'\n  ];\n\n  static mapAlter = {\n    '#': 1,\n    'b': -1\n  };\n\n  static mapFifthsToAlters = {\n    'sharp': ['F', 'C', 'G', 'D', 'A', 'E', 'B'],\n    'flat': ['B', 'E', 'A', 'D', 'G', 'C', 'F']\n  };\n\n  static mapRepeats = {\n    \"D.C. al Coda\": Converter.prototype.convertDaCapo,\n    \"D.C. al Fine\": Converter.prototype.convertDaCapo,\n    \"D.C. al 1st End.\": Converter.prototype.convertDaCapo,\n    \"D.C. al 2nd End.\": Converter.prototype.convertDaCapo,\n    \"D.C. al 3rd End.\": Converter.prototype.convertDaCapo,\n    \"D.S. al Coda\": Converter.prototype.convertDalSegno,\n    \"D.S. al Fine\": Converter.prototype.convertDalSegno,\n    \"D.S. al 1st End.\": Converter.prototype.convertDalSegno,\n    \"D.S. al 2nd End.\": Converter.prototype.convertDalSegno,\n    \"D.S. al 3rd End.\": Converter.prototype.convertDalSegno,\n    \"Fine\": Converter.prototype.convertFine,\n    \"3x\": Converter.prototype.convertRepeatNx,\n    \"4x\": Converter.prototype.convertRepeatNx,\n    \"5x\": Converter.prototype.convertRepeatNx,\n    \"6x\": Converter.prototype.convertRepeatNx,\n    \"7x\": Converter.prototype.convertRepeatNx,\n    \"8x\": Converter.prototype.convertRepeatNx\n  };\n\n  static mapTime = {\n    \"24\": { beats: 2, beatType: 4, beatUnit: 1 },\n    \"34\": { beats: 3, beatType: 4, beatUnit: 0.5 },\n    \"44\": { beats: 4, beatType: 4, beatUnit: 1 },\n    \"54\": { beats: 5, beatType: 4, beatUnit: 1 },\n    \"64\": { beats: 6, beatType: 4, beatUnit: 1 },\n    \"74\": { beats: 7, beatType: 4, beatUnit: 1 },\n    \"38\": { beats: 3, beatType: 8, beatUnit: 1 },\n    \"58\": { beats: 5, beatType: 8, beatUnit: 1 },\n    \"68\": { beats: 6, beatType: 8, beatUnit: 1 },\n    \"78\": { beats: 7, beatType: 8, beatUnit: 1 },\n    \"98\": { beats: 9, beatType: 8, beatUnit: 1 },\n    \"12\": { beats: 12, beatType: 8, beatUnit: 3 },\n    \"22\": { beats: 2, beatType: 2, beatUnit: 1 },\n    \"32\": { beats: 3, beatType: 2, beatUnit: 0.5 },\n  };\n\n  static convert(song, options = {}) {\n    const realOptions = Object.assign({}, this.defaultOptions, options);\n    return new Converter(song, realOptions).convert();\n  }\n\n  constructor(song, options) {\n    this.song = song;\n    this.options = options;\n    this.time = { beats: 4, beatType: 4, beatUnit: 1 };\n    this.fifths = null; // key signature's degree of fifths\n    this.measure = null; // current measure (of class Measure) being built\n    this.barRepeat = 0; // current bar number for single- and double-bar repeats\n    this.codas = []; // list of measures containing codas\n    this.repeats = 0; // repeat count for closing repeat barline\n    this.shortChord = false; // was 's' annotation encountered?\n    this.emptyCells = 0; // consecutive empty cells\n    this.emptyCellNewSystem = false; // did a new system occur in an empty cell?\n\n    // In iRP, there are 16 cells per line.\n    // The width in mm of a single cell depends on the page width and the margins.\n    this.cellWidth = (this.options.pageWidth - (2 * this.options.pageMargin)) / 16;\n\n    // chord-symbol.\n    this.parseChord = chordParserFactory({ \"altIntervals\": [\n      \"b5\",\n      \"b9\"\n    ]});\n    this.renderChord = chordRendererFactory({\n      useShortNamings: true,\n      printer: 'raw'\n    });\n  }\n\n  convert() {\n    return jstoxml.toXML(this.convertSong(), {\n      header: `\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML ${MUSICXML_VERSION} Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n      `.trim(),\n      indent: '  '\n    });\n  }\n\n  convertSong() {\n    return {\n      _name: 'score-partwise',\n      _attrs: { 'version': MUSICXML_VERSION },\n      _content: [{\n        'work': {\n          'work-title': this.song.title\n        }\n      }, {\n        'identification': [{\n          _name: 'creator',\n          _attrs: { 'type': 'composer' },\n          _content: this.song.composer\n        }, {\n          'encoding': [{\n            'software': `@infojunkie/ireal-musicxml ${Version.version}`\n          }, { ...(this.options.date && {\n            'encoding-date': Converter.convertDate(new Date())\n          })}, {\n            _name: 'supports',\n            _attrs: { 'element': 'accidental', 'type': 'no' }\n          }, {\n            _name: 'supports',\n            _attrs: { 'element': 'transpose', 'type': 'no' }\n          }, {\n            _name: 'supports',\n            _attrs: { 'attribute': 'new-page', 'element': 'print', 'type': 'yes', 'value': 'yes' }\n          }, {\n            _name: 'supports',\n            _attrs: { 'attribute': 'new-system', 'element': 'print', 'type': 'yes', 'value': 'yes' }\n          }]\n        }]\n      }, {\n        'defaults': {\n          'scaling': {\n            'millimeters': SCALING_MM,\n            'tenths': SCALING_TENTHS\n          },\n          'page-layout': {\n            'page-height': Converter._mmToTenths(this.options.pageHeight),\n            'page-width': Converter._mmToTenths(this.options.pageWidth),\n            'page-margins': {\n              'left-margin': Converter._mmToTenths(this.options.pageMargin, 4),\n              'right-margin': Converter._mmToTenths(this.options.pageMargin, 4),\n              'top-margin': Converter._mmToTenths(this.options.pageMargin, 4),\n              'bottom-margin': Converter._mmToTenths(this.options.pageMargin, 4)\n            }\n          }\n        }\n      }, {\n        'part-list': {\n          _name: 'score-part',\n          _attrs: { 'id': 'P1' },\n          _content: {\n            _name: 'part-name',\n            _attrs: { 'print-object': 'no' },\n            _content: 'Lead Sheet'\n          }\n        }\n      }, {\n        _name: 'part',\n        _attrs: { 'id': 'P1' },\n        _content: this.convertMeasures()\n      }]\n    };\n  }\n\n  // Date in yyyy-mm-dd\n  // https://stackoverflow.com/a/50130338/209184\n  static convertDate(date) {\n    return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))\n      .toISOString()\n      .split('T')[0];\n  }\n\n  static Measure = class {\n    constructor(number) {\n      this.body = {\n        _name: 'measure',\n        _attrs: { 'number': number },\n        _content: []\n      };\n      this.attributes = [];\n      this.chords = [];\n      this.barlines = [];\n      this.barEnding = null;\n    }\n\n    number() {\n      return this.body['_attrs']['number'];\n    }\n\n    assemble() {\n      // Attributes.\n      if (this.attributes.length) {\n        this.body['_content'].push({\n          'attributes': Converter.reorderSequence(this, this.attributes, Converter.sequenceAttributes)\n        });\n      }\n\n      // Chords.\n      this.chords.forEach(chord => {\n        this.body['_content'].push({\n          'harmony': chord.harmony\n        }, ...chord.notes.map(note => {\n          return {\n            'note': note\n          };\n        }));\n      });\n\n      // Barlines.\n      this.barlines[0]['_content'] = Converter.reorderSequence(this, this.barlines[0]['_content'], Converter.sequenceBarline);\n      this.body['_content'].splice(1, 0, this.barlines[0]);\n      this.barlines[1]['_content'] = Converter.reorderSequence(this, this.barlines[1]['_content'], Converter.sequenceBarline);\n      this.body['_content'].push(this.barlines[1]);\n\n      return this.body;\n    }\n  };\n\n  static Chord = class {\n    constructor(harmony, notes, ireal) {\n      this.harmony = harmony;\n      this.notes = notes;\n      this.ireal = ireal;\n      this.spaces = 0;\n      this.fermata = false;\n      this.short = false;\n    }\n\n    clone() {\n      const chord = new Converter.Chord(\n        structuredClone(this.harmony),\n        structuredClone(this.notes),\n        structuredClone(this.ireal)\n      );\n      chord.spaces = this.spaces;\n      chord.fermata = this.fermata;\n      chord.short = this.short;\n      return chord;\n    }\n\n    beats() {\n      return this.short ? 1 : 1 + this.spaces;\n    }\n  };\n\n  convertMeasures() {\n    // Are we starting a new system given the current cell index?\n    const isNewSystem = cellIndex => cellIndex > 0 && cellIndex % 16 === 0;\n\n    // Loop on cells.\n    const measures = this.song.cells.reduce((measures, cell, cellIndex) => {\n      // Start a new measure if needed.\n      // This means either finding an opening barline or finding non-empty cells while we're not in any measure.\n      if (cell.bars.match(/\\(|\\{|\\[/) || (!this.measure && (cell.chord || cell.annots.length || cell.comments.length))) {\n        if (this.measure) {\n          this._log(LogLevel.Warn, `Starting a new measure over existing measure. Closing current measure first.`);\n          this.measure.barlines.push(this.convertBarline('', 'right'));\n          if (this.adjustChordsDuration(this.measure)) {\n            measures.push(this.measure);\n          }\n        }\n        this.measure = new Converter.Measure(measures.length+1, this.options);\n\n        // Very first bar: add defaults.\n        if (!measures.length) {\n          this.measure.attributes.push({\n            'divisions': this.options.divisions\n          }, {\n            _name: 'clef',\n            _attrs: [{ 'print-object': this.options.clef ? 'yes' : 'no' }],\n            _content: [{\n              'sign': 'G'\n            }, {\n              'line': 2\n            }]\n          }, {\n            'staff-details': {\n              'staff-lines': 0\n            }\n          }, {\n            'measure-style': [{\n              _name: 'slash',\n              _attrs: { 'type': 'start', 'use-stems': this.options.notation === 'rhythmic' ? 'yes' : 'no' }\n            }]\n          }, this.convertKey());\n\n          // Add bpm if any.\n          if (this.song.bpm) {\n            this.measure.body['_content'].push(this.convertTempo(this.song.bpm));\n          }\n\n          // Add style and groove.\n          this.measure.body['_content'].push(this.convertStyleAndGroove(this.song.style, this.song.groove));\n        }\n\n        // Add starting barline.\n        this.measure.barlines.push(this.convertBarline(cell.bars, 'left', (isNewSystem(cellIndex) || this.emptyCellNewSystem) ? 'regular' : undefined));\n\n        // If we're still repeating bars, copy the previous bar now.\n        if (this.barRepeat) {\n          this.measure.chords = measures[measures.length-this.barRepeat-1].chords.map(chord => chord.clone());\n        }\n      }\n\n      // Short-circuit loop if no measure exists.\n      // It can happen that `measure` is still blank in case of empty cells in iReal layout.\n      // e.g. Girl From Ipanema in tests.\n      if (!this.measure) {\n        if (cell.chord || cell.annots.length || cell.comments.length || (cell.bars && cell.bars !== ')')) {\n          this._log(LogLevel.Warn, `Found non-empty orphan cell ${JSON.stringify(cell)}`, measures[measures.length-1]);\n        }\n\n        // This is an empty cell between measures.\n        // Count the consecutive empty cells because they will be converted to margins.\n        // Also remember that a new system has occurred.\n        this.emptyCells++;\n        if (isNewSystem(cellIndex)) {\n          this.emptyCellNewSystem = true;\n        }\n\n        return measures;\n      }\n\n      // Start a new system every 16 cells.\n      if (isNewSystem(cellIndex) || this.emptyCellNewSystem) {\n        this.measure.body['_content'].splice(0, 0, {\n          _name: 'print',\n          _attrs: { 'new-system': 'yes' },\n          _content: { ...(this.emptyCellNewSystem && {\n            'system-layout': {\n              'system-margins': [{\n                'left-margin': Converter._mmToTenths(this.cellWidth * this.emptyCells)\n              }, {\n                'right-margin': '0.00'\n              }]\n            }\n          })}\n        });\n      }\n\n      // If we accumulated empty cells but not at the start of the current system, then we adjust other distances.\n      // There are 2 cases to handle:\n      // - We're now in a fresh system: Add a right-margin to the previous measure.\n      // - We're in the middle of a system: Add a measure-distance to the current measure.\n      if (!this.emptyCellNewSystem && this.emptyCells > 0) {\n        if (this.measure.body['_content'][0]?.['_name'] === 'print' && this.measure.body['_content'][0]['_attrs']?.['new-system'] === 'yes') {\n          measures[measures.length-1].body['_content'].splice(0, 0, {\n            _name: 'print',\n            _content: {\n              'system-layout': {\n                'system-margins': [{\n                  'left-margin': '0.00'\n                }, {\n                  'right-margin': Converter._mmToTenths(this.cellWidth * this.emptyCells)\n                }]\n              }\n            }\n          });\n        }\n        else {\n          this.measure.body['_content'].splice(0, 0, {\n            _name: 'print',\n            _content: {\n              'measure-layout': {\n                'measure-distance': Converter._mmToTenths(this.cellWidth * this.emptyCells)\n              }\n            }\n          });\n        }\n      }\n\n      // Reset the empty cells.\n      this.emptyCellNewSystem = false;\n      this.emptyCells = 0;\n\n      // Chords.\n      if (cell.chord) {\n        switch (cell.chord.note) {\n          case 'x': {\n            // Handle single bar repeat.\n            this.barRepeat = 1;\n            this.measure.chords = measures[measures.length-this.barRepeat].chords.map(chord => chord.clone());\n            break;\n          }\n          case 'r': {\n            // Handle double bar repeat.\n            // We do this in 2 stages, because a blank measure occurs after 'r' (to keep the measure count correct)\n            // Here, we copy the next-to-last measure and set the repeat flag.\n            // The next opening measure will pick up the remaining measure.\n            this.barRepeat = 2;\n            this.measure.chords = measures[measures.length-this.barRepeat].chords.map(chord => chord.clone());\n            break;\n          }\n          case 'p':\n            // If slash does not occur as first chord, count it as a space.\n            // Otherwise, handle it as 'W'.\n            if (this.measure.chords.length) {\n              this.measure.chords[this.measure.chords.length-1].spaces++;\n              break;\n            }\n            // Fall into case 'W'.\n\n          case 'W': {\n            // Handle invisible root by copying previous chord.\n            let target = this.measure;\n            if (!target.chords.length) {\n              target = measures.slice().reverse().find(m => m.chords.length);\n              if (!target) {\n                this._log(LogLevel.Error, `Cannot find any measure with chords prior to ${JSON.stringify(cell.chord)}`);\n              }\n            }\n            if (target) {\n              const chord = target.chords[target.chords.length-1].ireal;\n              chord.over = cell.chord.over;\n              chord.alternate = cell.chord.alternate;\n              this.measure.chords.push(this.convertChord(chord));\n            }\n            break;\n          }\n          case ' ': {\n            // TODO Handle alternate chord only.\n            this._log(LogLevel.Warn, `Unhandled empty/alternate chord ${JSON.stringify(cell.chord)}`);\n            break;\n          }\n          default: {\n            // Process new chord.\n            this.measure.chords.push(this.convertChord(cell.chord));\n            this.measure.chords[this.measure.chords.length-1].short = this.shortChord;\n          }\n        }\n      }\n      else if (!this.barRepeat) {\n        // There are 16 cells per row, regardless of time signature.\n        // Barlines can occur anywhere and the iReal Pro player uses an unknown algorithm\n        // to schedule the chords within a measure, using the empty cells as \"hints\" for scheduling.\n        // https://technimo.helpshift.com/a/ireal-pro/?s=editor&f=chord-spacing-in-the-editor\n        // https://technimo.helpshift.com/a/ireal-pro/?s=editor&f=how-do-i-fit-more-than-48-measures-into-one-chart\n        //\n        // Our approach to emulate the iReal Pro player is as follows:\n        // 1. Whenever we find an empty cell, attach it to the previous chord (or discard it if there's no previous chord)\n        // 2. At the end of the measure, adjust the chord durations based on existing empty cells across the measure\n        if (this.measure.chords.length) {\n          this.measure.chords[this.measure.chords.length-1].spaces++;\n        }\n      }\n\n      // Other attributes.\n      cell.annots.forEach(annot => {\n        switch(annot[0]) {\n          case '*': { // section\n            const section = annot.slice(1);\n            this.measure.body['_content'].push(this.convertSection(section));\n            break;\n          }\n          case 'T': { // time\n            const time = annot.slice(1);\n            this.measure.attributes.push(this.convertTime(time));\n            break;\n          }\n          case 'S': { // segno\n            this.measure.body['_content'].push(this.convertSegno());\n            break;\n          }\n          case 'N': { // ending\n            // TODO This assumes a single ending at a time.\n            let ending = parseInt(annot.slice(1));\n            if (ending < 1) {\n              // It can happen that the ending number comes as 0 from iRP.\n              // In this case, we do a best effort of finding the previous ending and incrementing it.\n              const target = measures.slice().reverse().find(m => !!m.barEnding);\n              ending = target?.barEnding ?? 0 + 1;\n            }\n            this.measure.barlines[0]['_content'].push(this.convertEnding(ending, 'start'));\n            // End the previous ending at the previous measure's right barline.\n            // Also, remove the 'discontinue' ending from its starting measure since we found an end to it.\n            if (ending > 1) {\n              measures[measures.length-1].barlines[1]['_content'].push(this.convertEnding(ending-1, 'stop'));\n              const target = measures.slice().reverse().find(m => m.barEnding === ending-1);\n              if (!target) {\n                this._log(LogLevel.Error, `Cannot find ending ${ending-1} in right barline of any measure`);\n              }\n              else {\n                // The last result is the good one: remove the 'discontinue' ending.\n                const index = target.barlines[1]['_content'].findIndex(b => !!b && b['_name'] === 'ending');\n                if (index === -1) {\n                  this._log(LogLevel.Error, `Cannot find ending ${ending-1} in right barline`, target);\n                }\n                delete target.barlines[1]['_content'][index];\n              }\n            }\n            // We will add a 'discontinue' ending at this measure's right barline.\n            this.measure.barEnding = ending;\n            break;\n          }\n          case 'Q': { // coda\n            // We add all codas as \"tocoda\" because we expect the last one to be the actual coda.\n            // After all measures have been built, adjust the last coda.\n            // https://irealpro.com/how-the-coda-symbol-works-in-ireal-pro/\n            this.measure.body['_content'].push(this.convertToCoda());\n            this.codas.push(this.measure);\n            break;\n          }\n\n          // Short and long chord settings.\n          // These will affect the calculation of chord durations.\n          // Set the current chord size setting and remember it for subsequent chords.\n          case 'l': {\n            if (this.measure.chords.length) {\n              this.measure.chords[this.measure.chords.length-1].short = false;\n            }\n            this.shortChord = false;\n            break;\n          }\n          case 's': {\n            if (this.measure.chords.length) {\n              this.measure.chords[this.measure.chords.length-1].short = true;\n            }\n            this.shortChord = true;\n            break;\n          }\n\n          case 'f': { // Fermata\n            this.measure.chords[this.measure.chords.length-1].fermata = true;\n            break;\n          }\n\n          case 'U': { // END, treated as Fine.\n            this.measure.body['_content'].push(this.convertFine('END'));\n            break;\n          }\n\n          default: this._log(LogLevel.Warn, `Unhandled annotation \"${annot}\"`);\n        }\n      });\n\n      // Comments and repeats.\n      // TODO Handle measure offset.\n      // https://www.w3.org/2021/06/musicxml40/musicxml-reference/elements/offset/\n      cell.comments.map(c => c.trim()).forEach(comment => {\n        const repeatFn = this._map(Converter.mapRepeats, comment);\n        if (repeatFn) {\n          this.measure.body['_content'].push(repeatFn.call(this, comment));\n        } else {\n          this.measure.body['_content'].push(this.convertComment(comment));\n        }\n      });\n\n      // Close and insert the measure if needed.\n      // Ignore measures without any chords, they're probably empty spaces.\n      if (cell.bars.match(/\\)|\\}|\\]|Z/) && this.measure.chords.length) {\n        // Add closing barline and ending if needed.\n        this.measure.barlines.push(this.convertBarline(cell.bars, 'right'));\n        if (this.measure.barEnding) {\n          // In case of numbered repeats, end measure an open repeat by default  \u250C\u2500\u2500\u2500\u2500\u2500\u2500\n          //                                                                     \u2502 2.\n          // It may be replaced later by a closing repeat  \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n          //                                               \u2502 2.        \u2502\n          this.measure.barlines[1]['_content'].push(this.convertEnding(this.measure.barEnding, 'discontinue'));\n        }\n\n        // Close out the measure.\n        if (this.adjustChordsDuration(this.measure)) {\n          measures.push(this.measure);\n        }\n        this.measure = null;\n        if (this.barRepeat) this.barRepeat--;\n      }\n\n      return measures;\n    }, []);\n\n    // Adjust final right margin if needed.\n    const remainingCells = this.song.cells.length % 16 - this.emptyCells;\n    if (remainingCells > 0 && measures.length > 0) {\n      measures[measures.length-1].body['_content'].splice(0, 0, {\n        _name: 'print',\n        _content: {\n          'system-layout': {\n            'system-margins': [{\n              'left-margin': '0.00'\n            }, {\n              'right-margin': Converter._mmToTenths(this.cellWidth * remainingCells)\n            }]\n          }\n        }\n      });\n    }\n\n    // Adjust last coda if any.\n    if (this.codas.length) {\n      const target = this.codas[this.codas.length-1];\n      const direction = target.body['_content'].findIndex(d =>\n        d['_name'] === 'direction' &&\n        Array.isArray(d['_content']) &&\n        d['_content'].some(s =>\n          s['_name'] === 'sound' &&\n          Object.keys(s['_attrs']).includes('tocoda')\n        )\n      );\n      if (direction === -1) {\n        this._log(LogLevel.Warn, `Cannot find sound direction`, target);\n      }\n      target.body['_content'][direction] = this.convertCoda();\n    }\n\n    // `Measure.assemble()` puts all the parts in `Measure.body`.\n    return measures.map(measure => measure.assemble());\n  }\n\n  // Fix order of elements according to sequence as specified by an xs:sequence.\n  // @param {array<element>} elements - Array of elements to sort.\n  // @param {array<string>} sequence - Array of element names in order of xs:sequence.\n  // @return {array<element>} Ordered array of elements.\n  static reorderSequence(measure, elements, sequence) {\n    return elements.filter(a => Object.keys(a).length).sort((a1, a2) => {\n      let k1 = Object.keys(a1)[0]; if (k1 === '_name') k1 = a1[k1];\n      let k2 = Object.keys(a2)[0]; if (k2 === '_name') k2 = a2[k2];\n      // TODO indexOf() needs to search every time. Make it faster with memoize?\n      const i1 = sequence.indexOf(k1);\n      const i2 = sequence.indexOf(k2);\n      if (i1 === -1) {\n        this._log(LogLevel.Warn, `Unrecognized element \"${k1}\"`, measure);\n      }\n      if (i2 === -1) {\n        this._log(LogLevel.Warn, `Unrecognized element \"${k2}\"`, measure);\n      }\n      return i1 - i2;\n    });\n  }\n\n  convertRepeatNx(comment) {\n    let repeats = null;\n    if (null !== (repeats = comment.match(/(\\d+)x/))) {\n      this.repeats = repeats[1];\n    }\n  }\n\n  convertFine(comment) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'below' },\n      _content: [{\n        'direction-type': {\n          'words': comment\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'fine': 'yes' }\n      }]\n    };\n  }\n\n  convertDaCapo(comment) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'below' },\n      _content: [{\n        'direction-type': {\n          'words': comment\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'dacapo': 'yes' }\n      }]\n    };\n  }\n\n  convertDalSegno(comment) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'below' },\n      _content: [{\n        'direction-type': {\n          'words': comment\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'dalsegno': 'yes' }\n      }]\n    };\n  }\n\n  convertComment(comment) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': comment[0] === '*' ? 'above' : 'below' },\n      _content: {\n        'direction-type': {\n          'words': comment[0] === '*' ? comment.slice(3) : comment\n        }\n      }\n    };\n  }\n\n  convertEnding(ending, type) {\n    // TODO This assumes a single ending.\n    return {\n      _name: 'ending',\n      _attrs: { 'number': ending, 'type': type },\n      _content: `${ending}.`\n    };\n  }\n\n  convertBarline(bars, location, forced = undefined) {\n    let style = location === 'left' ? 'none' : 'regular';\n    let repeat = null;\n    if (bars.match(/\\[|\\]/)) {\n      style = 'light-light';\n    }\n    else if (bars.match(/Z/)) {\n      style = 'light-heavy';\n    }\n    else if (bars.match(/\\{|\\}/)) {\n      style = location === 'left' ? 'heavy-light' : 'light-heavy';\n      repeat = location === 'left' ? 'forward' : 'backward';\n    }\n\n    // Set the current repeat count to 2, which may be changed later if we find a repeat annotation.\n    if (repeat === 'forward') {\n      this.repeats = 2;\n    }\n\n    return {\n      _name: 'barline',\n      _attrs: { 'location': location },\n      _content: [{\n        'bar-style': forced ?? style\n      }, { ...(repeat && {\n        _name: 'repeat',\n        _attrs: { 'direction': repeat, ...(repeat === 'backward' && { 'times': this.repeats }) }\n      })}]\n    };\n  }\n\n  convertSection(section) {\n    if (section === 'i') section = 'Intro';\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: {\n        'direction-type': {\n          'rehearsal': section\n        }\n      }\n    };\n  }\n\n  convertSegno() {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: [{\n        'direction-type': {\n          _name: 'segno'\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'segno': 'segno' }\n      }]\n    };\n  }\n\n  convertCoda() {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: [{\n        'direction-type': {\n          '_name': 'coda'\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'coda': 'coda' }  // TODO: We assume a single coda\n      }]\n    };\n  }\n\n  convertToCoda() {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: [{\n        'direction-type': {\n          'words': 'To Coda'\n        }\n      }, {\n        _name: 'sound',\n        _attrs: { 'tocoda': 'coda' }  // TODO: We assume a single coda\n      }]\n    };\n  }\n\n  convertTempo(bpm) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: [{\n        'direction-type': [{\n          _name: 'metronome',\n          _attrs: { 'parentheses': 'no' },\n          _content: [{\n            'beat-unit': this.calculateChordDuration(1)[0].type\n          }, {\n            'per-minute': bpm\n          }]\n        }]\n      }, {\n        _name: 'sound',\n        _attrs: { 'tempo': bpm }\n      }]\n    };\n  }\n\n  convertTime(time) {\n    this.time = this._map(\n      Converter.mapTime, time, {\n        beats: parseInt(time[0]), beatType: parseInt(time[1]), beatUnit: 1\n      }, `Unexpected time signature ${time}`\n    );\n    return {\n      'time': [{\n        'beats': this.time.beats\n      }, {\n        'beat-type': this.time.beatType\n      }]\n    };\n  }\n\n  adjustChordsDuration(measure) {\n    // Now that the measure is closed, we can adjust the chord durations, taking empty cells into consideration.\n    // https://www.irealb.com/forums/showthread.php?25161-Using-empty-cells-to-control-chord-duration\n    //\n    // Rules:\n    // - Minimum chord duration is 1 beat\n    // => Each chord starts as 1 beat\n    // => Short chords always remain as 1 beat\n    // => Count of chords <= beats per measure\n    // - Starting empty cells are discarded (already discarded during the cell loop)\n    // - Each remaining empty cell counts as 1 beat (already counted during cell loop)\n    // - Empty cell beats are added to their preceding chords (already added during the cell loop)\n    // => Total chord durations <= beats per measure\n    // - Remaining beats are distributed evenly among chords from first to last\n    //\n    if (measure.chords.length > this.time.beats) {\n      this._log(LogLevel.Error, `Too many chords (${measure.chords.length} out of ${this.time.beats})`, measure);\n      return true;\n    }\n    let beats = measure.chords.reduce((beats, chord) => beats + chord.beats() * this.time.beatUnit, 0);\n    if (!beats) {\n      this._log(LogLevel.Warn, `No chord found. Skipping current measure.`, measure);\n      return false;\n    }\n    if (beats > this.time.beats) {\n      // Reduce spaces.\n      // We're guaranteed to end this loop because measure.chords.length <= this.time.beats\n      let chordIndex = 0;\n      while (beats > this.time.beats) {\n        if (measure.chords[chordIndex].spaces > 0) {\n          measure.chords[chordIndex].spaces--;\n          beats -= this.time.beatUnit;\n        }\n        chordIndex = (chordIndex + 1) % measure.chords.length;\n      }\n    }\n    else {\n      // Distribute free beats among the chords, except for short chords.\n      let chordIndex = 0;\n      let hasBeatsChangedInACycle = false;\n      while (beats < this.time.beats) {\n        if (!measure.chords[chordIndex].short) {\n          measure.chords[chordIndex].spaces++;\n          beats += this.time.beatUnit;\n          hasBeatsChangedInACycle = true;\n        }\n        chordIndex = (chordIndex + 1) % measure.chords.length;\n        if (chordIndex === 0 && !hasBeatsChangedInACycle) {\n          // We've made a complete cycle and beat count has not changed - break now.\n          this._log(LogLevel.Warn, `Cannot add more beats to the current measure.`, measure);\n          break;\n        }\n      }\n    }\n\n    // Adjust actual chord durations.\n    measure.chords = measure.chords.map(chord => {\n      chord.notes = this.calculateChordDuration(chord.beats() * this.time.beatUnit).map((duration, i, ds) =>\n        this.convertChordNote(\n          duration,\n          i === ds.length - 1 ? chord.fermata : false, // Possible fermata on last chord note only\n          this.options.notation === 'rhythmic' && ds.length > 1 ? (i > 0 ? 'stop' : 'start') : null // Possible tie in case of rhythmic notation\n        )\n      );\n      return chord;\n    });\n\n    return true;\n  }\n\n  calculateChordDuration(beats) {\n    // Lowest beat resolution is eighth-note (8).\n    const mapDuration = {\n      '1': [{ t: 'eighth', d: 0, b: 1 }],\n      '2': [{ t: 'quarter', d: 0, b: 2 }],\n      '3': [{ t: 'quarter', d: 1, b: 3 }],\n      '4': [{ t: 'half', d: 0, b: 4 }],\n      '5': [{ t: 'quarter', d: 1, b: 3 }, { t: 'quarter', d: 0, b: 2 }],\n      '6': [{ t: 'half', d: 1, b: 6 }],\n      '7': [{ t: 'half', d: 2, b: 7 }],\n      '8': [{ t: 'whole', d: 0, b: 8 }],\n      '9': [{ t: 'half', d: 1, b: 6 }, { t: 'quarter', d: 1, b: 3 }],\n      '10': [{ t: 'half', d: 1, b: 6 }, { t: 'half', d: 0, b: 4 }],\n      '11': [{ t: 'half', d: 2, b: 7 }, { t: 'half', d: 0, b: 4 }],\n      '12': [{ t: 'whole', d: 1, b: 12 }],\n      '13': [{ t: 'half', d: 2, b: 7 }, { t: 'half', d: 1, b: 6 }],\n      '14': [{ t: 'whole', d: 2, b: 14 }],\n      '15': [{ t: 'whole', d: 0, b: 8 }, { t: 'half', d: 2, b: 7 }],\n    };\n\n    if (this.options.notation === 'slash') {\n      // In case of slash notation, return an array of n=beats elements, each with a duration of 1 beat.\n      const index = 1 * 8 / this.time.beatType;\n      return Array(beats).fill(this\n        ._map(mapDuration, index, [], `Unexpected beat count 1 for time signature ${this.time.beats}/${this.time.beatType}`)\n        .map(duration => {\n          return {\n            duration: duration.b * this.options.divisions / 2,\n            type: duration.t,\n            dots: duration.d\n          };\n        })[0] // We're sure to get only one entry in this case.\n      );\n    }\n    else {\n      // In case of rhythmic notation, return a single note (or 2 tied notes) corresponding to the desired beat count.\n      const index = beats * 8 / this.time.beatType;\n      return this\n      ._map(mapDuration, index, [], `Unexpected beat count ${beats} for time signature ${this.time.beats}/${this.time.beatType}`)\n      .map(duration => {\n        return {\n          duration: duration.b * this.options.divisions / 2,\n          type: duration.t,\n          dots: duration.d\n        };\n      });\n    }\n  }\n\n  convertChordNote(duration, fermata = false, tie = null) {\n    const altered = Converter.mapFifthsToAlters[this.fifths >= 0 ? 'sharp' : 'flat'].slice(0, Math.abs(this.fifths));\n    const noteType = {\n      _name: 'pitch',\n      _content: [{\n        'step': this.options.step\n      }, {\n        'alter': altered.includes(this.options.step) ? (this.fifths > 0 ? 1 : -1) : 0\n      }, {\n        'octave': this.options.octave\n      }]\n    };\n\n    const notations = [];\n    if (fermata) {\n      notations.push({ _name: 'fermata' });\n    }\n    if (tie) {\n      notations.push({ _name: 'tied', _attrs: { 'type': tie } });\n    }\n\n    return Converter.reorderSequence(this.measure, [noteType, {\n      _name: 'cue'\n    }, {\n      _name: 'notehead',\n      _content: this.options.notehead,\n      _attrs: [{ 'font-size': this.options.noteheadSize }]\n    }, {\n      'duration': duration.duration\n    }, {\n      'voice': 1,\n    }, {\n      _name: 'type',\n      _attrs: { 'size': 'full' },\n      _content: duration.type\n    }, { ...(notations.length && {\n      'notations': Converter.reorderSequence(this.measure, notations, Converter.sequenceNotations)\n    })}]\n    .concat(Array(duration.dots).fill({ _name: 'dot' })), Converter.sequenceNote);\n  }\n\n  convertChordDegree(value, type, alter) {\n    return {\n      _name: 'degree',\n      _attrs: { 'print-object': 'no' },\n      _content: [{\n        'degree-value': value\n      }, {\n        'degree-alter': alter\n      }, {\n        'degree-type': type\n      }]\n    };\n  }\n\n  convertChordSymbol(chord) {\n    const parsedChord = this.renderChord(this.parseChord(`${chord.note}${chord.modifiers}`));\n    if (!parsedChord) {\n      this._log(LogLevel.Warn, `Unrecognized chord \"${chord.note}${chord.modifiers}\"`);\n      return { rootStep: null, rootAlter: null, chordKind: null, chordDegrees: [], chordText: null };\n    }\n\n    const rootStep = parsedChord.input.rootNote[0];\n    const rootAlter = this._map(Converter.mapAlter, parsedChord.input.rootNote[1] || null, null, `Unrecognized accidental in chord \"${parsedChord.input.rootNote}\"`);\n    const chordText = parsedChord.formatted.descriptor + parsedChord.formatted.chordChanges.join('');\n\n    // Find chord quality (aka kind).\n    // `chord-symbol` misses a bunch of MusicXML chord qualities so we'll have to derive them ourselves.\n    const mapKind = {\n      'major': 'major',\n      'major6': 'major-sixth',\n      'major7': 'major-seventh',\n      'dominant7': 'dominant',\n      'minor': 'minor',\n      'minor6': 'minor-sixth',\n      'minor7': 'minor-seventh',\n      'minorMajor7': 'major-minor',\n      'augmented': 'augmented',\n      'diminished': 'diminished',\n      'diminished7': 'diminished-seventh',\n      'power': 'power'\n    };\n    let chordKind = this._map(mapKind, parsedChord.normalized.quality, '', `Unrecognized chord quality \"${parsedChord.normalized.quality}\"`);\n\n    // Convert extensions to their equivalent MusicXML kind.\n    // Find the highest extension, then replace the word following [major, minor, dominant] with it.\n    if (parsedChord.normalized.extensions.length) {\n      const extension = Math.max(...parsedChord.normalized.extensions.map(e => parseInt(e))).toString();\n      const mapExtensionKind = {\n        '9': '-ninth',\n        '11': '-11th',\n        '13': '-13th'\n      };\n      chordKind = chordKind.split('-')[0] + this._map(mapExtensionKind, extension, '', `Unhandled extension ${extension}`);\n\n      // chord-symbol considers dominant-11th to be suspended - but that's not _necessarily_ the case.\n      // https://en.wikipedia.org/wiki/Eleventh_chord\n      if (chordKind === 'dominant-11th') {\n        parsedChord.normalized.isSuspended = false;\n      }\n    }\n\n    // Detect other chord kinds by explicit interval comparison.\n    [\n      { intervals: ['1', '4', '5'], kind: 'suspended-fourth', strict: true },\n      { intervals: ['1', '5', '9'], kind: 'suspended-second', strict: true },\n      { intervals: ['1', 'b3', 'b5', 'b7'], kind: 'half-diminished', strict: true },\n      { intervals: ['1', '3', '#5', 'b7'], kind: 'augmented-seventh', strict: false }\n    ].some(chord => {\n      if (\n        (!chord.strict || parsedChord.normalized.intervals.length === chord.intervals.length) &&\n        chord.intervals.every((s, i) => s === parsedChord.normalized.intervals[i])\n      ) {\n        chordKind = chord.kind;\n\n        // Remove the intervals from the parsedChord to avoid duplication below.\n        chord.intervals.forEach(i => {\n          parsedChord.normalized.alterations = parsedChord.normalized.alterations.filter(p => p === i);\n          parsedChord.normalized.adds = parsedChord.normalized.adds.filter(p => p === i);\n          parsedChord.normalized.omits = parsedChord.normalized.omits.filter(p => p === i);\n        });\n\n        // Add the missing intervals from the parsedChord to the adds.\n        parsedChord.normalized.intervals.forEach(i => {\n          if (!chord.intervals.includes(i)) {\n            parsedChord.normalized.adds.push(i);\n          }\n        });\n\n        // Stop looping.\n        return true;\n      }\n    });\n\n    // Handle suspended chords other than triads.\n    const chordDegrees = [];\n    if (parsedChord.normalized.isSuspended && !chordKind.includes('suspended')) {\n      parsedChord.normalized.adds.push('4');\n      // Handle case of sus(add3)\n      if (!parsedChord.normalized.adds.includes('3')) {\n        parsedChord.normalized.omits.push('3');\n      }\n    }\n\n    // Add chord degrees.\n    parsedChord.normalized.alterations.forEach(alteration => {\n      const degree = alteration.slice(1);\n      chordDegrees.push(\n        this.convertChordDegree(\n          degree,\n          (degree === '5' || parsedChord.normalized.extensions.includes(degree)) ? 'alter' : 'add',\n          this._map(Converter.mapAlter, alteration[0], 0, `Unrecognized alter symbol in \"${alteration}\"`)\n        )\n      );\n    });\n    parsedChord.normalized.adds.forEach(add => {\n      const alteration = Object.keys(Converter.mapAlter).includes(add[0]) ? add[0] : null;\n      const degree = alteration ? add.slice(1) : add;\n      chordDegrees.push(\n        this.convertChordDegree(degree, 'add', this._map(Converter.mapAlter, alteration, 0, `Unrecognized alter symbol in \"${add}\"`))\n      );\n    });\n    parsedChord.normalized.omits.forEach(omit => {\n      const alteration = Object.keys(Converter.mapAlter).includes(omit[0]) ? omit[0] : null;\n      const degree = alteration ? omit.slice(1) : omit;\n      chordDegrees.push(\n        this.convertChordDegree(degree, 'subtract', this._map(Converter.mapAlter, alteration, 0, `Unrecognized alter symbol in \"${omit}\"`))\n      );\n    });\n\n    return { rootStep, rootAlter, chordKind, chordDegrees, chordText };\n  }\n\n  convertChord(chord) {\n    let harmony = null;\n\n    // Special case: 'n' for no chord\n    if (chord.note === 'n') {\n      harmony = [{\n        'root': [{\n          _name: 'root-step',\n          _attrs: { 'text': '' },\n          _content: this.options.step\n        }],\n      }, {\n        _name: 'kind',\n        _attrs: { 'text': 'N.C.' },\n        _content: 'none',\n      }];\n    }\n    else {\n      const { rootStep, rootAlter, chordKind, chordDegrees, chordText } = this.convertChordSymbol(chord);\n\n      // Handle bass note\n      const bass = !chord.over ? null : [{\n        'bass-step': chord.over.note[0]\n      }, { ...(chord.over.note[1] && {\n        'bass-alter': this._map(Converter.mapAlter, chord.over.note[1], null, `Unrecognized accidental in bass note \"${chord.over.note}\"`)\n      })}];\n\n      harmony = [{\n        'root': [{\n          'root-step': rootStep\n        }, { ...(rootAlter && { // Don't generate the root-alter entry if rootAlter is blank\n          'root-alter': rootAlter\n        })}],\n      }, {\n        _name: 'kind',\n        _attrs: { 'text': chordText, 'use-symbols': 'no' },\n        _content: chordKind,\n      }, { ...(bass && {\n        'bass': bass\n      })}].concat(chordDegrees);\n    }\n\n    // TODO Handle alternate chord\n    if (chord.alternate) {\n      this._log(LogLevel.Warn, `Unhandled alternate chord ${JSON.stringify(chord.alternate)}`);\n    }\n\n    return new Converter.Chord(\n      harmony,\n      // Initial chord duration is 1 beat\n      this.calculateChordDuration(1).map(duration => this.convertChordNote(duration)),\n      chord\n    );\n  }\n\n  convertKey() {\n    const mapKeys = {\n      // Major keys\n      'C': 0, 'G': 1, 'D': 2, 'A': 3, 'E': 4, 'B': 5, 'F#': 6, 'C#': 7,\n      'F': -1, 'Bb': -2, 'Eb': -3, 'Ab': -4, 'Db': -5, 'Gb': -6, 'Cb': -7,\n      // Minor keys\n      'A-': 0, 'E-': 1, 'B-': 2, 'F#-': 3, 'C#-': 4, 'G#-': 5, 'D#-': 6, 'A#-': 7,\n      'D-': -1, 'G-': -2, 'C-': -3, 'F-': -4, 'Bb-': -5, 'Eb-': -6, 'Ab-': -7\n    };\n\n    // Remember the fifth.\n    this.fifths = this._map(mapKeys, this.song.key, 0, `Unrecognized key signature \"${this.song.key}\"`);\n\n    return {\n      _name: 'key',\n      _attrs: [{ 'print-object': this.options.keySignature ? 'yes' : 'no' }],\n      _content: [{\n        'fifths': this.fifths\n      }, {\n        'mode': this.song.key.slice(-1) === '-' ? 'minor' : 'major'\n      }]\n    };\n  }\n\n  convertStyleAndGroove(style, groove) {\n    return {\n      _name: 'direction',\n      _attrs: { 'placement': 'above' },\n      _content: [{\n        'direction-type': [{\n          'words': style\n        }]\n      }, {\n        'sound': [{\n          'play': [{\n            _name: 'other-play',\n            _attrs: { 'type': 'groove' },\n            _content: groove || style\n          }]\n        }]\n      }]\n    };\n  }\n\n  _log(logLevel, message, measure = this.measure) {\n    if (logLevel < this.options.logLevel) return;\n    const log = `[ireal-musicxml] [${this.song.title}${measure ? '#' + measure.number() : ''}] ${message}`;\n    let method = 'warn';\n    switch (logLevel) {\n      case LogLevel.Debug: method = 'debug'; break;\n      case LogLevel.Info: method = 'info'; break;\n      case LogLevel.Warn: method = 'warn'; break;\n      case LogLevel.Error: method = 'error'; break;\n    }\n    console[method](log);\n  }\n\n  _map(map, key, defaultValue, message, logLevel = LogLevel.Warn, measure = this.measure) {\n    if (!key) return defaultValue;\n    if (!(key in map)) {\n      if (message) {\n        this._log(logLevel, message, measure);\n      }\n      return defaultValue || null;\n    }\n    return map[key];\n  }\n\n  static _mmToTenths(mm, decimals = 2) {\n    const value = mm * SCALING_TENTHS / SCALING_MM;\n    const power = Math.pow(10, decimals);\n    return Math.round(value * power) / power;\n  }\n}\n", "{\n  \"name\": \"ireal-musicxml\",\n  \"version\": \"2.0.5\",\n  \"description\": \"iReal Pro to MusicXML converter.\",\n  \"author\": \"Karim Ratib <karim.ratib@gmail.com> (https://github.com/infojunkie)\",\n  \"license\": \"GPL-3.0-only\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/infojunkie/ireal-musicxml\"\n  },\n  \"homepage\": \"https://github.com/infojunkie/ireal-musicxml\",\n  \"type\": \"module\",\n  \"types\": \"./build/ireal-musicxml.d.ts\",\n  \"files\": [\n    \"LICENSE.txt\",\n    \"build/*\",\n    \"src/*\"\n  ],\n  \"bin\": {\n    \"ireal-musicxml\": \"./src/cli/cli.js\"\n  },\n  \"exports\": {\n    \"import\": \"./build/ireal-musicxml.js\",\n    \"require\": \"./build/ireal-musicxml.cjs\"\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:esm && npm run build:cjs && npm run build:d.ts\",\n    \"build:d.ts\": \"cp src/types/* build/\",\n    \"build:esm\": \"esbuild src/lib/index.js --bundle --format=esm --minify --sourcemap --outfile=build/ireal-musicxml.js\",\n    \"build:cjs\": \"esbuild src/lib/index.js --bundle --platform=node --packages=external --minify --sourcemap --outfile=build/ireal-musicxml.cjs\",\n    \"test\": \"npm run build && npm run test:lint && npm run test:spec && npm run test:ts\",\n    \"test:spec\": \"node --test --test-name-pattern=\\\"${TEST:-.*}\\\"\",\n    \"test:ts\": \"node --test --loader=ts-node/esm --require ts-node/register test/*.spec.ts\",\n    \"test:lint\": \"eslint src --fix\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^22.7.7\",\n    \"@xmldom/xmldom\": \"^0.8.0\",\n    \"esbuild\": \"0.24.0\",\n    \"eslint\": \"^9.13.0\",\n    \"resolve\": \"^1.22.8\",\n    \"sanitize-filename\": \"^1.6.3\",\n    \"ts-node\": \"^10.9.2\",\n    \"typescript\": \"^4.9.5\",\n    \"validate-with-xmllint\": \"^1.2.0\",\n    \"xpath.js\": \"^1.1.0\"\n  },\n  \"dependencies\": {\n    \"chord-symbol\": \"^3.0.0\",\n    \"fast-diff\": \"^1.2.0\",\n    \"jstoxml\": \"^2.0.6\",\n    \"promise\": \"^8.1.0\"\n  }\n}\n", "import pkg from '../../package.json' with { type: 'json' };\n\nexport class Version {\n  static name = pkg.name;\n  static version = pkg.version;\n  static author = pkg.author;\n  static description = pkg.description;\n}"],
  "mappings": "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",
  "names": ["lib_exports", "__export", "Cell", "Chord", "Converter", "LogLevel", "Playlist", "Song", "Version", "convert", "convertSync", "__toCommonJS", "import_promise", "import_fast_diff", "Playlist", "ireal", "playlistEncoded", "parts", "part", "Song", "error", "title", "song", "songs", "diffs", "diff", "d", "Cell", "Chord", "note", "modifiers", "over", "alternate", "_Song", "oldFormat", "music", "unscramble", "text", "arr", "found", "i", "match", "cells", "obj", "prevobj", "cell", "composer", "chord", "comment", "offset", "r", "p", "obfusc50", "newString", "import_jstoxml", "import_chord_symbol", "package_default", "Version", "package_default", "chordParserFactory", "chordRendererFactory", "ChordSymbol", "LogLevel", "MUSICXML_VERSION", "SCALING_MM", "SCALING_TENTHS", "Converter", "_Converter", "song", "options", "realOptions", "jstoxml", "Version", "date", "number", "chord", "note", "harmony", "notes", "ireal", "isNewSystem", "cellIndex", "measures", "cell", "target", "m", "annot", "section", "time", "ending", "index", "b", "c", "comment", "repeatFn", "remainingCells", "direction", "d", "s", "measure", "elements", "sequence", "a", "a1", "a2", "k1", "k2", "i1", "i2", "repeats", "type", "bars", "location", "forced", "style", "repeat", "bpm", "beats", "chordIndex", "hasBeatsChangedInACycle", "duration", "i", "ds", "mapDuration", "fermata", "tie", "altered", "noteType", "notations", "value", "alter", "parsedChord", "rootStep", "rootAlter", "chordText", "mapKind", "chordKind", "extension", "e", "mapExtensionKind", "p", "chordDegrees", "alteration", "degree", "add", "omit", "bass", "mapKeys", "groove", "logLevel", "message", "log", "method", "map", "key", "defaultValue", "mm", "decimals", "power", "convertSync", "ireal", "options", "playlist", "Playlist", "song", "Converter", "convert", "Promise", "resolve"]
}
